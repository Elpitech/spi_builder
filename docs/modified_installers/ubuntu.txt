Install Ubuntu 20.04.1 on MITX

Description

The installation ISO is available here: https://ubuntu.com/download/server/arm

We need to adapt it to Baikal-M.

Analysis

The ISO does not boot because the kernel 5.4 that is used for this Ubuntu requires some
UEFI functionality (EFI RTS) that is not present. We can modify the installation ISO
to use our own kernel that is known to boot well. The ISO also fails to boot if we
supply 'noefi' in the kernel cmdline. This used to help with the Debian 10 ISO.

Design

The task is to substitute our own kernel, initrd and startup scripts while booting
the Ubuntu ISO and after the installation, too.

We generally follow our Debian approach to building a modified installer ISO
with a few exceptions and extra steps described here.

Copy the ISO contents
=====================

mount iso as loop device and copy the contents somewhere writable:

tar cf - . | (cd /tmp/ubuntu.mod; tar xfp -)

Note: you better use tar instead of cp, so you will no miss hidden files/dirs
like ".disk" directory that indicates this is the rootfs for the installer,
and other special files.

Initrd and kernel
=================

Find initrd there are replace the 5.4 modules with 4.9 modules.
Repackage initrd and place it back in casper/ dir, as well as the compressed 4.9 kernel
vmlinuz. The kernel and modules shall be configured to support device mapper
and other stuff required by the installer (see config.patch).
We take casper/initrd from the Ubuntu ISO and add our modules to its
usr/lib/modules dir:

ls /tmp/initrd/usr/lib/modules/
4.9.229-bm-gf2b0e6748867-dirty  5.4.0-42-generic

We analyzed the modules in the /tmp/initrd/usr/lib/modules/5.4.0-42-generic
dir and added the ones that we think are not platform-specific and that may
be relevant. The most important ones are squashfs and device-mapper with
friends. See the list in the attached config.patch.

Useful commands:
lsinitramfs initrd
lz4cat initrd | cpio -it | grep ko
sudo unmkinitramfs ./initrd /tmp/initrd
Alternatively:
gunzip -c initrd |fakeroot cpio -id

To rebuild initrd:
cd /tmp/initrd
$ find . | cpio -o --format=newc | gzip -9 > initrd
Alternatively:
find . | fakeroot cpio -o -Hnewc |gzip -9 > initrd

Copy initrd and vmlinuz 4.9 to the /casper dir.

efi.img
=======

We need to modify the efi.img file. By default ./boot/grub/efi.img only has GRUB
EFI loader. We need to add our kernel, initrd and startup scripts there:

$ ls -l
total 61573
drwxr-xr-x 3 root root      512 Jul 29 18:43 efi
-rwxr-xr-x 1 root root 47520974 Oct 22 19:05 initramfs-4.9-edelweiss
-rwxr-xr-x 1 root root 15526400 Oct 22 19:05 mitx.Image
-rwxr-xr-x 1 root root      341 Oct 23 11:26 startup_bootaa64.nsh
-rwxr-xr-x 1 root root      223 Oct 22 19:05 startup_lvm.nsh
-rwxr-xr-x 1 root root      168 Oct 22 19:05 startup_nolvm.nsh
-rwxr-xr-x 1 root root      341 Oct 23 11:25 startup.nsh

The startup.nsh script will run automatically when the ISO image is booted.  It
will run GRUB EFI and offer one of 3 install options from ./boot/grub/grub.cfg.
The other files will not be used during the installation - they are needed to
bootstrap the system after the installation is finished. initramfs-4.9-edelweiss
is the default initramfs disk created by Ubuntu installation process for the 5.4
kernel. We just replaced the 5.4 modules there with our 4.9 modules. mitx.Image
is the same as the kernel in /casper/vmlinuz, only not compressed (search for
the "Image" file in your kernel build directory). Different startup script may
be needed depending on the partition choice during the installation.

The new efi.img can be created like this: 

dd if=/dev/zero of=/tmp/efi.f32 bs=1M count=70
sudo losetup --show --find efi.f32
# /dev/loop3
mkfs.fat -F32 /dev/loop3
# Alternatively, this could be F16:
mkfs.fat -F16 /dev/loop3
mount /dev/loop3 /tmp/xxx
# copy the existing files from original efi.img mounted on efi.mod:
cd ../efi.mod/
tar cf - . | (cd /tmp/xxx; tar xfp -)
# Add your stuff there, startup scripts, initramfs-4.9-edelweiss, kernel.
# Unmount and destoy the loop device afterwards.
umount /tmp/xxx
losetup -d /dev/loop3

Copy the resulting efi.f32 to ./boot/grub/efi.img.

Squashfs images
===============

The ISO also contains the squashfs image modules.squashfs-generic
used during one of the installation stages. We need to modify it
with our kernel 4.9 modules as well.

Useful commands:
unsquashfs -l modules.squashfs-generic

# unsquashfs somewhere and make modifications (add modules to usr/lib/, etc.):
mkdir /tmp/modules; cd /tmp/modules
unsquashfs /path/to/modules.squashfs-generic
The default output dir is squashfs-root.

# To roll it back into squashfs, study the properties of the original squashfs:
sudo unsquashfs -s modules.squashfs-generic

Found a valid SQUASHFS 4:0 superblock on modules.squashfs-generic
Creation or last append time Fri Jul 31 20:20:54 2020
Filesystem size 63744.07 Kbytes (62.25 Mbytes)
Compression xz
Block size 131072
Filesystem is exportable via NFS
Inodes are compressed
Data is compressed
Fragments are compressed
Always-use-fragments option is not specified
Xattrs are compressed
Duplicates are removed
Number of fragments 1420
Number of inodes 7140
Number of ids 1

See man mksquashfs.
Most of the params are at their default values, the command for creation will be:

sudo mksquashfs squashfs-root modules.squashfs-generic -comp xz -Xbcj arm

Since the ISO is read-only, we need to mirror it to something writable before we
can put a modified modules.squashfs-generic into it.

[Optional] grub.cfg
===================

Optional: Update boot/grub/grub.cfg cmdline params with:
earlyprintk=uart8250-32bit,0x20230000 earlycon=efifb,ram fbcon=map:10 console=tty1

*.deb packages
==============

Do not replace the Ubuntu *.deb packages for kernel 5.4 with our kernel
packages.  The package list and the packages are signed by Ubuntu and it will
refuse to install our *.deb packages during installation anyway. Skip Vadim's
steps for Package.gz and Release files update. We will install our kernel 4.9
deb packages manually, later.

Burn ISO image
==============

Once all the modifications to ISO contents are done, recalculate the md5
checksums:
$ cd bm-iso
$ md5sum `find ! -name "md5sum.txt" -follow -type f` > md5sum.txt

$ xorriso -as mkisofs -r -checksum_algorithm_iso md5,sha1 -V 'Ubuntu 20.04.1 arm64 n' \
-o ubuntu.iso -J -joliet-long -cache-inodes -no-emul-boot -boot-load-size 4 -boot-info-table \
-eltorito-alt-boot --efi-boot boot/grub/efi.img -append_partition 2 0x01 bm-iso/boot/grub/efi.img \
-partition_offset 16 ubuntu.mod

Note: you can leave partition type 0x01 here, even though it was F32 (0xb) when
it was created above.

After install
=============

Go to UEFI shell and move one of the startup_*.nsh scripts on /dev/sda1 to
startup.nsh, depending on whether you used LVM install or a regular one.  Once
booted, we will install our 4.9 kernel deb packages, run update-grub, fine-tune
/boot/grub/grub.cfg if needed (for example, remove references to kernel 5.4 boot
options), and finally will install grub to MBR with grub-install.

Our kernel deb packages:
linux-firmware-image-4.9.229-bm-gf2b0e6748867-dirty_4.9.229-bm-gf2b0e6748867-dirty-9_arm64.deb
linux-headers-4.9.229-bm-gf2b0e6748867-dirty_4.9.229-bm-gf2b0e6748867-dirty-9_arm64.deb
linux-image-4.9.229-bm-gf2b0e6748867-dirty_4.9.229-bm-gf2b0e6748867-dirty-9_arm64.deb
linux-image-4.9.229-bm-gf2b0e6748867-dirty-dbg_4.9.229-bm-gf2b0e6748867-dirty-9_arm64.deb
linux-libc-dev_4.9.229-bm-gf2b0e6748867-dirty-9_arm64.deb

First boot may be slow. We find that removing proprietary Ubuntu packages snapd
and cloud-init helps to speed up:
sudo systemctl disable snapd
sudo systemctl disable cloud-init
sudo apt remove snapd cloud-init
sudo apt autoremove

Some mouses depending on the model may complain about not been used and will
re-connect periodically, crapping out the virtual terminal with useless
messagees. Either install gpm to keep the mouse busy by making it available in
the virtual terminal, or make the kernel complain less:

echo 1 > /proc/sys/kernel/printk

If booting with network disconnected, you may see long timeouts, as the 
system assumes the networks is always there. To work around this issue,
you can tell the systemd that the network connectivity on boot-up is
optional:

[/etc/netplan/00-installer-config.yaml]

# This is the network config written by 'subiquity'
network:
  ethernets:
    eth0:
      dhcp4: true
      optional: true
    eth1:
      dhcp4: true
      optional: true
  version: 2

$ sudo netplan apply

To convert the installation from server to desktop, install the corresponding
meta package:

sudo apt install ubuntu-desktop

Artifacts are stored at Yandex.disk/good_images/mitx-m/20201021_ubuntu20.

Unit test

1. Install with LVM partitioning and verify that the target boots to login prompt.
